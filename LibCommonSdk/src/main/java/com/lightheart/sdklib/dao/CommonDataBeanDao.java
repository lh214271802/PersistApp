package com.lightheart.sdklib.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "localCommonCache".
*/
public class CommonDataBeanDao extends AbstractDao<CommonDataBean, Long> {

    public static final String TABLENAME = "localCommonCache";

    /**
     * Properties of entity CommonDataBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, long.class, "_id", true, "_id");
        public final static Property JsonData = new Property(1, String.class, "jsonData", false, "jsonData");
        public final static Property UserId = new Property(2, String.class, "userId", false, "userId");
        public final static Property SaveTime = new Property(3, long.class, "saveTime", false, "saveTime");
        public final static Property SaveTimeLimit = new Property(4, int.class, "saveTimeLimit", false, "saveTimeLimit");
        public final static Property SaveUrlKey = new Property(5, String.class, "saveUrlKey", false, "saveUrlKey");
        public final static Property ParamsKey = new Property(6, String.class, "paramsKey", false, "paramsKey");
        public final static Property HelpQueryParams = new Property(7, String.class, "helpQueryParams", false, "helpQueryParams");
    }


    public CommonDataBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CommonDataBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"localCommonCache\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: _id
                "\"jsonData\" TEXT," + // 1: jsonData
                "\"userId\" TEXT," + // 2: userId
                "\"saveTime\" INTEGER NOT NULL ," + // 3: saveTime
                "\"saveTimeLimit\" INTEGER NOT NULL ," + // 4: saveTimeLimit
                "\"saveUrlKey\" TEXT," + // 5: saveUrlKey
                "\"paramsKey\" TEXT," + // 6: paramsKey
                "\"helpQueryParams\" TEXT);"); // 7: helpQueryParams
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"localCommonCache\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CommonDataBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String jsonData = entity.getJsonData();
        if (jsonData != null) {
            stmt.bindString(2, jsonData);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
        stmt.bindLong(4, entity.getSaveTime());
        stmt.bindLong(5, entity.getSaveTimeLimit());
 
        String saveUrlKey = entity.getSaveUrlKey();
        if (saveUrlKey != null) {
            stmt.bindString(6, saveUrlKey);
        }
 
        String paramsKey = entity.getParamsKey();
        if (paramsKey != null) {
            stmt.bindString(7, paramsKey);
        }
 
        String helpQueryParams = entity.getHelpQueryParams();
        if (helpQueryParams != null) {
            stmt.bindString(8, helpQueryParams);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CommonDataBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.get_id());
 
        String jsonData = entity.getJsonData();
        if (jsonData != null) {
            stmt.bindString(2, jsonData);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(3, userId);
        }
        stmt.bindLong(4, entity.getSaveTime());
        stmt.bindLong(5, entity.getSaveTimeLimit());
 
        String saveUrlKey = entity.getSaveUrlKey();
        if (saveUrlKey != null) {
            stmt.bindString(6, saveUrlKey);
        }
 
        String paramsKey = entity.getParamsKey();
        if (paramsKey != null) {
            stmt.bindString(7, paramsKey);
        }
 
        String helpQueryParams = entity.getHelpQueryParams();
        if (helpQueryParams != null) {
            stmt.bindString(8, helpQueryParams);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CommonDataBean readEntity(Cursor cursor, int offset) {
        CommonDataBean entity = new CommonDataBean( //
            cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // jsonData
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userId
            cursor.getLong(offset + 3), // saveTime
            cursor.getInt(offset + 4), // saveTimeLimit
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // saveUrlKey
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // paramsKey
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // helpQueryParams
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CommonDataBean entity, int offset) {
        entity.set_id(cursor.getLong(offset + 0));
        entity.setJsonData(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSaveTime(cursor.getLong(offset + 3));
        entity.setSaveTimeLimit(cursor.getInt(offset + 4));
        entity.setSaveUrlKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setParamsKey(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setHelpQueryParams(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CommonDataBean entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CommonDataBean entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CommonDataBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
